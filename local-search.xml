<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>redis 主从复制的使用及原理</title>
    <link href="undefined2019/10/28/redis%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <url>2019/10/28/redis%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="模拟搭建"><a href="#模拟搭建" class="headerlink" title="模拟搭建"></a>模拟搭建</h2><p>目标:</p><ul><li>搭建一主二从的redis环境</li></ul><p>环境:</p><ul><li>Ubuntu 16.04.6 LTS</li><li>redis 3.0.6</li></ul><p>搭建开始:</p><ol><li>下载 redis</li></ol><pre><code class="shell">sudo apt-get install redis-server</code></pre><ol start="2"><li>修改配置</li></ol><blockquote><p>因为只在一台服务器上做实验，所以需要设置不同端口模拟不同的redis服务器</p></blockquote><p>redis 服务器的默认配置是<code>/etc/redis/redis.conf</code></p><ul><li>为每个redis-server实例复制一份配置文件</li></ul><pre><code class="shell">#以实例的端口号命名文件夹mkdir 6379  6380  6381# 复制redis.confcp redis.conf 6379/redis.confcp redis.conf 6380/redis.confcp redis.conf 6381/redis.conf</code></pre><ul><li>修改配置文件端口号</li></ul><pre><code class="shell">sudo vim 6379/redis.conf#vim view# Accept connections on the specified port, default is 6379.# If port 0 is specified Redis will not listen on a TCP socket.port 6379 # &lt;-- 修改这里</code></pre><p>其他配置文件步骤相同</p><ul><li>修改配置允许其他IP访问</li></ul><pre><code class="shell">sudo vim 6379/redis.conf# vim view# By default Redis listens for connections from all the network interfaces# available on the server. It is possible to listen to just one or multiple# interfaces using the &quot;bind&quot; configuration directive, followed by one or# more IP addresses.## Examples:## bind 192.168.1.100 10.0.0.1bind 127.0.0.1 #&lt;-- 修改这里 设置允许访问的IP，这里我为了实验直接注释</code></pre><ul><li>设置主服务器</li></ul><pre><code class="shell">sudo vim 6379/redis.conf# vim view# Master-Slave replication. Use slaveof to make a Redis instance a copy of# another Redis server. A few things to understand ASAP about Redis replication.## 1) Redis replication is asynchronous, but you can configure a master to#    stop accepting writes if it appears to be not connected with at least#    a given number of slaves.# 2) Redis slaves are able to perform a partial resynchronization with the#    master if the replication link is lost for a relatively small amount of#    time. You may want to configure the replication backlog size (see the next#    sections of this file) with a sensible value depending on your needs.# 3) Replication is automatic and does not need user intervention. After a#    network partition slaves automatically try to reconnect to masters#    and resynchronize with them.## slaveof &lt;masterip&gt; &lt;masterport&gt; &lt;-- 这就是语法，根据上面的描述slaveof 127.0.0.1 6380 #&lt;-- 设置主服务器为6380</code></pre><ul><li>[另一种方式]设置主服务器</li></ul><p>不在文件中配置，<code>slaveof 127.0.0.1 6380</code>语句，直接用配置文件启动服务器，在<code>redis-cli -p port</code> 中配置<code>slaveof 127.0.0.1 6380</code>也能达到同样的效果</p><ul><li><p>[可选]如果主服务器设置了<code>requirepass</code>密码，则从服务器需要设置<code>masterauth</code>密码，我这里不做设置</p></li><li><p>启动redis-server</p></li></ul><pre><code class="shell">sudo redis-server 6379/redis.confsudo redis-server 6380/redis.confsudo redis-server 6381/redis.conf# 查看进程ps -ef | grep redis# ps resultredis      5398      1  0 08:10 ?        00:00:00 /usr/bin/redis-server 127.0.0.1:6379root       5534      1  0 08:14 ?        00:00:00 redis-server *:6379root       5539      1  0 08:14 ?        00:00:00 redis-server *:6380root       5545      1  0 08:14 ?        00:00:00 redis-server *:6381iwen       5562   3906  0 08:16 pts/2    00:00:00 grep --color=auto redis</code></pre><ul><li>验证主服务器</li></ul><pre><code class="shell">info replication# result# Replicationrole:masterconnected_slaves:2slave0:ip=127.0.0.1,port=6379,state=online,offset=1493,lag=1slave1:ip=127.0.0.1,port=6381,state=online,offset=1493,lag=1master_repl_offset:1493repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:2repl_backlog_histlen:1492</code></pre><p>出现<code>slave0 slave1</code> 说明从服务器配置成功</p><ul><li>验证数据复制功能</li></ul><p>在主服务器中加入如下键值对</p><pre><code class="shell">redis-cli -p 6380set hello &quot;hello info replication&quot;set salve &quot;i am your master&quot;</code></pre><p>分别进入从服务器</p><pre><code class="shell"># slave 0redis-cli -p 6379keys *# result1) &quot;hello&quot;2) &quot;salve&quot;# slave 1redis-cli -p 6381keys *# result1) &quot;hello&quot;2) &quot;salve&quot;</code></pre><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><h3 id="复制的实现"><a href="#复制的实现" class="headerlink" title="复制的实现"></a>复制的实现</h3><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><ul><li>初次同步 | 完整重同步</li></ul><ol><li>从服务器向主服务器发送<code>psync ? -1</code> 请求完整重同步</li></ol><blockquote><p>psync runid offset # runid 是由40位十六进制数字组成的redis ID。 offset 是上次同步到命令的偏移量 ，主服务器和从服务器各维持着一个offset，主服务器的offset表示最新同步命令的偏移量，从服务器的offset表示上次同步的命令的偏移量<br>runid用于判断，断线连时，前一次的主服务器是否相同，如果不同则执行，完整重同步，如果相同则执行，部分重同步</p></blockquote><ol><li>主服务器收到<code>psync</code>执行<code>BGSAVE</code>命令，后台生成一个RDB文件，并使用一个缓冲区记录从现在开始执行的全部命令</li></ol><blockquote><p>BGSAVE 是非常耗时的操作。操作IO的都是非常耗时的操作</p></blockquote><ol start="3"><li><p>主服务器执行完<code>BGSAVE</code>命令之后，发送这个RDB文件至从服务器，从服务器接收并载入这个RDB文件，更新从数据库至执行<code>BGSAVE</code>时的状态</p></li><li><p>主服务器发送缓冲区命令至从数据库，更新从数据库状态至最新状态</p></li></ol><p>图示:<br><img src="/img/allsync.png" srcset="/img/loading.gif" alt="初次同步过程"></p><ul><li>断线之后的同步 | 部分重同步</li></ul><ol><li>复制偏移量</li></ol><blockquote><p>为了解决不重复同步相同命令</p></blockquote><ul><li>主服务器每传播n个字节命令，就在自己的offset上加n</li><li>从服务器每次接受到主服务器发来的n个字节命令，就在自己的offset上加上n</li></ul><p>如果主从服务器状态一致，那么他们的偏移量是相同的。如果他们的偏移量不同则表示，状态不一致。</p><ol start="2"><li>复制积压缓冲区</li></ol><blockquote><p>记录在一段时间内执行过的命令</p></blockquote><ul><li>主服务器维持着一个固定长度先进先出的队列</li></ul><blockquote><p>默认大小为1m<br>修改积压缓冲区大小 <code>repl-backlog-size</code><br><code>repl-backlog-size</code> 计算方法为 <code>second * write_size_per_second</code></p></blockquote><ul><li>主服务器在传播命令的同时会把命令加入到积压缓冲区中</li><li>当从服务器提供的<code>offset</code> + 1在缓冲区中，则回复<code>continue</code>并把offset之后的命令发送给从服务器</li><li>当从服务器发送的<code>offset</code> + 1不在缓冲区中的时候，则回复<code>fullresync runid offset</code>并执行完整重同步</li></ul><p>图示:<br><img src="/img/partialsync.png" srcset="/img/loading.gif" alt="部分重同步"></p><h4 id="命令传播"><a href="#命令传播" class="headerlink" title="命令传播"></a>命令传播</h4><p>主从服务器完成同步操作之后，如何保证主从服务器的状态一致。称为命令传播</p><p>顾名思义：命令传播 就是主服务器的命令传递给从服务器</p><ul><li>利用复制积压缓冲区</li></ul><h3 id="Psync-和-sync"><a href="#Psync-和-sync" class="headerlink" title="Psync 和 sync"></a>Psync 和 sync</h3><h4 id="PSYNC"><a href="#PSYNC" class="headerlink" title="PSYNC"></a>PSYNC</h4><blockquote><p>高于2.8版本</p></blockquote><p>解决了旧版<code>sync</code>消耗大的缺点</p><p>语法 <code>psync &lt;runid&gt; &lt;offset&gt;</code></p><h4 id="SYNC"><a href="#SYNC" class="headerlink" title="SYNC"></a>SYNC</h4><blockquote><p>低于2.8版本</p></blockquote><p>没有实现部分重同步，每次连接都是完整重同步，耗时不讨好</p><h3 id="复制的流程"><a href="#复制的流程" class="headerlink" title="复制的流程"></a>复制的流程</h3><ol><li><p>设置主服务器的IP和端口<br>客户端执行 <code>slaveof &lt;masterip&gt; &lt;port&gt;</code> 绑定主服务器</p></li><li><p>建立套接字<br>从服务器向主服务器发送套接字连接，主服务器记录从服务器信息，从服务器设置状态为客户端状态 <strong><em>从服务器是主服务器的客户端</em></strong></p></li><li><p>发送ping命令</p><ul><li>检查主从服务器之间的能否通信</li><li>检查主服务器能否处理命令<br>发送ping之后可能收到的结果</li><li>如果主服务器向从服务器返回了一个命令，但是从服务器读取命令超时，则代表主从服务器之间的链路不好，从服务器断开重新连接主服务器</li><li>主服务器向从服务器返回一个错误，表示主服务器暂时无法处理这个服务的请求。这时从服务器重新连接主服务器</li><li>主服务器返回<code>PONG</code>表示继续下一步</li></ul></li><li><p>身份验证</p><ul><li>主服务器需要设置<code>requirepass</code></li><li>从服务器需要设置<code>masterauth</code><br>可能遇到的情况</li><li>主服务器设置了验证，从服务器没提供秘钥，返回<code>NOAUTh</code></li><li>主服务器没设置验证，从服务器提供了秘钥, 返回<code>no password is set</code></li><li>主服务器设置了验证，从服务器提供了秘钥，但是秘钥不相等, 返回<code>invalid password</code></li><li>主服务器设置了验证，从服务器提供了秘钥，秘钥相等,主服务器继续工作<br>图示:<br><img src="/img/masterslaveauth.png" srcset="/img/loading.gif" alt="验证图示"></li></ul></li><li><p>发送端口信息<br>从服务器向主服务器发送从服务器监听的端口号 <code>REPLCONF listening-port &lt;port-number&gt;</code></p></li><li><p>同步<br>从服务器向主服务器发送<code>psync</code></p></li><li><p>命令传播<br>完成同步之后，执行命令传播</p></li></ol><h3 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h3><blockquote><p>用于同步数据库的检查offset， 检查主从服务器链路状态， 保证安全服务</p></blockquote><p>命令格式 <code>REPLCONF ack &lt;replication_offset&gt;</code></p><ol><li>可以使用<code>info replication</code>查看<code>slave</code>条目的<code>lag</code>值，知道上一次同步已经过去多少秒</li><li><code>min-slaves-to-write x</code> <code>min-slaves-max-log y</code> 从服务器数量少于x个，或者延迟大于y那么，主服务器拒绝写命令</li><li>每次发送的<code>replication_offset</code>用于检查，从服务器的命令和主服务器的命令之间是否相同，如果不同则执行，部分复制操作。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>2.8之前的同步不能高效的处理数据，2.8之后的<code>psync</code>能很好地处理各种情况</li><li>部分重同步，需要借助<code>runid</code> <code>offset</code> <code>backlog</code> 实现</li><li>从服务器是主服务器的客户端</li><li>主服务器通过命令传播的方式，保持同步之后的数据一致性</li></ul>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据一致性</tag>
      
      <tag>高可用</tag>
      
      <tag>主从复制</tag>
      
      <tag>备份</tag>
      
      <tag>多数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为 AC的数据转发</title>
    <link href="undefined2019/10/27/%E5%8D%8E%E4%B8%BA%20AC%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8F%91/"/>
    <url>2019/10/27/%E5%8D%8E%E4%B8%BA%20AC%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8F%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux 常用操作</title>
    <link href="undefined2019/10/27/Linux%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>2019/10/27/Linux%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>常用操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis Sentinel的使用及原理</title>
    <link href="undefined2019/10/27/redis%20Sentinel%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <url>2019/10/27/redis%20Sentinel%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="搭建Sentinel服务集群"><a href="#搭建Sentinel服务集群" class="headerlink" title="搭建Sentinel服务集群"></a>搭建Sentinel服务集群</h2><blockquote><p>实现2 sentinel 1主2从 redis集群</p></blockquote><p>环境:</p><ul><li>Ubuntu 16.04.6 LTS</li><li>redis 3.0.6</li></ul><ol><li>安装redis-server</li></ol><pre><code class="shell">sudo apt-get install redis-server</code></pre><blockquote><p>可以去官网下载安装包</p></blockquote><ol start="2"><li>安装redis-sentinel</li></ol><pre><code class="shell">sudo apt-get install redis-sentinel</code></pre><ol start="3"><li>新建为不同的redis实例新建一个文件夹</li></ol><blockquote><p>因为用同一台机器的不同端口号来模拟不同的redis服务器</p></blockquote><pre><code class="shell">#新建文件夹sudo mkdir 6379 6380 6381 26379 26380#为每个实例新建一个配置文件，这里直接复制sudo cp redis.conf 6379/redis.confsudo cp redis.conf 6380/redis.confsudo cp redis.conf 6381/redis.confsudo cp sentinel.conf 26379/sentinel.confsudo cp sentinel.conf 26380/sentinel.conf</code></pre><ol start="4"><li>修改redis的配置文件</li></ol><pre><code class="shell">#这里以6380为主服务器#配置主服务器的端口，和允许访问的IPsudo vim 6380/redis.conf#view# Accept connections on the specified port, default is 6379.# If port 0 is specified Redis will not listen on a TCP socket.port 6380 #&lt;--修改这#修改允许访问的IP# By default Redis listens for connections from all the network interfaces# available on the server. It is possible to listen to just one or multiple# interfaces using the &quot;bind&quot; configuration directive, followed by one or# more IP addresses.## Examples:## bind 192.168.1.100 10.0.0.1#bind 127.0.0.1  &lt;--修改这里，这里我为了方便直接注释</code></pre><p>修改从服务器的配置</p><pre><code class="shell">#这里的从服务器是（以端口号划分）：6379  6381#这里以6379为例sudo vim 6379/redis.conf#view# Accept connections on the specified port, default is 6379.# If port 0 is specified Redis will not listen on a TCP socket.port 6379 #&lt;--修改端口号#修改允许访问的IP# By default Redis listens for connections from all the network interfaces# available on the server. It is possible to listen to just one or multiple# interfaces using the &quot;bind&quot; configuration directive, followed by one or# more IP addresses.## Examples:## bind 192.168.1.100 10.0.0.1#bind 127.0.0.1 &lt;---修改这里，这里我直接注释了# 设置主服务器slaveof 127.0.0.1 6380 #&lt;--设置主服务器的ip 端口#设置masterauth 看情况设置</code></pre><p>相同的步骤修改<code>6381</code>服务器</p><ol start="5"><li>修改sentinel服务器的配置</li></ol><pre><code class="shell">#这里以26379为例sudo vim 26379/sentinel.conf#viewbind 127.0.0.1 #《--设置允许访问的ip# port &lt;sentinel-port&gt;# The port that this sentinel instance will run onport 26379 #&lt;--设置sentinel的端口# 设置监视的主服务器#sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;# Tells Sentinel to monitor this master, and to consider it in O_DOWN# (Objectively Down) state only if at least &lt;quorum&gt; sentinels agree.sentinel monitor mymaster 127.0.0.1 6380 2#设置sentinel判断主观下线时间#30秒后没反应，则判断为主观下线#每个sentinel的判断主观下线的事件可以不同sentinel down-after-milliseconds mymaster 30000</code></pre><ol start="6"><li>启动所有redis实例</li></ol><pre><code class="shell">sudo redis-server 6379/redis.confsudo redis-server 6380/redis.confsudo redis-server 6381/redis.confsudo redis-sentinel 26379/sentinel.confsudo redis-sentinel 26380/sentinel.conf#查看sentinel信息redis-cli -p 26379 info#或者进入sentinelsentinel master mymastersentinel slaves mymaster</code></pre><p>可以把主服务器停掉，进过30秒之后重新出现了一台主服务器</p><h2 id="sentinel是怎么获取主从服务器信息的"><a href="#sentinel是怎么获取主从服务器信息的" class="headerlink" title="sentinel是怎么获取主从服务器信息的"></a>sentinel是怎么获取主从服务器信息的</h2><ul><li>获取主服务器信息是配置文件<code>sentinel monitor mymaster 127.0.0.1 6380 2</code>设置的。更多详细信息是通过每10秒一次的频率向主服务器发送<code>info</code>信息得到。更多详细信息，如<code>runid</code>等</li><li>从主服务器的<code>info</code>信息中获得从服务器的信息，<code>slave ip=xxx</code>,sentinel根据这些从服务器的ip信息就可以获得更多从服务器的信息了</li></ul><h2 id="sentinel是怎么保证redis服务的可用性的"><a href="#sentinel是怎么保证redis服务的可用性的" class="headerlink" title="sentinel是怎么保证redis服务的可用性的"></a>sentinel是怎么保证redis服务的可用性的</h2><ul><li>sentinel服务器每两秒一次向，主从服务器发送信息</li></ul><pre><code class="shell">publish __sentinel__:hello &quot;&lt;s_ip&gt;,&lt;s_port&gt;,&lt;s_runid&gt;,&lt;s_epoch&gt;,&lt;m_name&gt;,&lt;m_ip&gt;,&lt;m_port&gt;,&lt;m_epoch&gt;&quot;</code></pre><p><strong>s_</strong> 代表sentinel服务器<br><strong>m_</strong> 代表master服务器</p><ul><li>收到信息的服务器根据这些信息对比自己保存的信息，更新响应的状态</li><li>当其他sentinel服务器收到信息的时候会对比信息中的<code>s_runid</code>如果相同则不做处理，如果不同则说明这条信息是其他sentinel发送过来的信息，这个sentinel服务器会对这条信息做记录，用来更新自己维持的<code>sentinels</code>字典</li><li>主从服务器与sentinel服务器建立连接之后，sentinel会发送<code>subscribe __sentinel__:hello</code>，主从服务器会订阅<code>hello</code>频道，直到sentinel断开</li></ul><h2 id="sentinel是如何判断一台redis服务不可用的"><a href="#sentinel是如何判断一台redis服务不可用的" class="headerlink" title="sentinel是如何判断一台redis服务不可用的"></a>sentinel是如何判断一台redis服务不可用的</h2><p>猜想:</p><ul><li>sentinel与每台redis服务器建立心跳连接，当心跳连接超时次数超过多少多少次的时候判断，这台redis服务器为下线状态</li><li>这样思考是正确的，但是当这台sentinel 只与 redis服务之间的链路出现问题，就判断他为下线这种做法不妥当，应当多台sentinel服务器都判断他为下线的时候才为真正的下线</li></ul><p>上面的猜想在sentinel中都有很好的解决方案</p><h3 id="主观下线"><a href="#主观下线" class="headerlink" title="主观下线"></a>主观下线</h3><blockquote><p>只有sentinel S1 判断 redis A 服务器下线，还未与其他服务器进行交流</p></blockquote><p>如果一台redis服务器在<code>down-after-milliseconds</code>之内连续向sentinel回复除了<code>PONG</code> <code>LOADING</code> <code>MASTERDOWN</code>之外的回复，<br>那么这sentinel就会修改这个redis服务器所对应的实例结构的flags中打开<code>SRT_S_DWON</code>的状态，表示这个实例为主观下线状态</p><h3 id="客观下线状态"><a href="#客观下线状态" class="headerlink" title="客观下线状态"></a>客观下线状态</h3><blockquote><p>当有一台sentinel服务器判断他为主观下线状态的时候，这台sentinel服务器会向其他sentinel服务器询问。</p></blockquote><ul><li><p>询问其他sentinel服务是否同意这个redis实例为下线状态<br>命令 <code>sentinel is-master-down-by-addr &lt;ip&gt; &lt;port&gt; &lt;current_epoch&gt; &lt;runid&gt;</code></p></li><li><p>当收到其他sentinel服务器的询问的时候，sentinel会根据询问的ip和端口号去检查，这个redis服务是否已经下线</p></li></ul><pre><code class="shell">&lt;down_state&gt;&lt;leader_runid&gt;&lt;leader_epoch&gt;</code></pre><ul><li>发出询问的sentinel根据回复，设置redis服务的状态</li></ul><p>比如回复：</p><pre><code class="shell">1*0</code></pre><p>表示这个redis服务已经下线，则设置这个redis服务的状态为客观下线</p><h2 id="当一台redis服务不可用的时候sentinel是怎么做的"><a href="#当一台redis服务不可用的时候sentinel是怎么做的" class="headerlink" title="当一台redis服务不可用的时候sentinel是怎么做的"></a>当一台redis服务不可用的时候sentinel是怎么做的</h2><p>猜想:</p><ul><li>当redis主服务器被判断为客观下线状态了时，我们sentinel那么多台，应该由哪台sentinel服务器来做决定？</li><li>我们如果每台sentinel的状态都是健康的，我们就学一下民主投票，我们一起选举一位leader服务器出来，为大家做决定。</li><li>但是谁是候选人呢？</li><li>如果每台都是候选人，那他们每个人都投票给自己怎么解决呢？</li></ul><p>sentinels 为了选出谁是领导的问题，使用了数据一致性算法raft</p><ul><li>每台sentinel都维护着一个随机的计数器，每次sentinel之间的交流都会重置这个计数器，当需要选出一个leader服务器的时候不重置计数器，谁的计数器先到为0，则成为候选人，并向其他sentinel服务器，征求选票</li><li>当好几台都成为候选服务器的时候选票多的当选</li><li>如果选票一样多，再递归选出leader服务器</li><li>每次进行leader服务器选举之后，<code>epoch</code>都会加一，这个leader服务器当选的任期是，下一次出现需要选leader时</li></ul><h2 id="leader-sentinel如何进行故障转移的"><a href="#leader-sentinel如何进行故障转移的" class="headerlink" title="leader sentinel如何进行故障转移的"></a>leader sentinel如何进行故障转移的</h2><blockquote><p>选举出了leader服务器了，但是他怎么指挥进行故障转移呢？</p></blockquote><ol><li><p>选出新的主服务器<br>需要选出状态最好的拥有最新数据的从数据库，作为新的主数据库</p><ul><li>leader sentinel服务器向被选出来的从服务器发送<code>slaveof no one</code>设置这个状态为主服务器，</li><li>leader ，每10s向这个服务器发送info信息，已检查这个服务器是否顺利升为主服务器</li></ul></li><li><p>修改从服务器的复制目标<br>sentinel 向其他的从服务器发送<code>slaveof 新主服务器的ip 端口</code>，设置这个从服务器的新目标</p></li><li><p>将旧主服务器设置为从服务器<br>当这个旧的主服务器重新上线的时候，sentinel向其发送<code>slaveof 新主服务器的ip 端口</code>,设置他成为从服务器</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>sentinel 哨兵服务器也是redis服务器，只是他做的工作不同</li><li>sentinel 的更多配置和用法，还未深入了解</li><li>加油！</li></ul>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高可用</tag>
      
      <tag>sentiel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis 持久化的使用及原理</title>
    <link href="undefined2019/10/27/redis%20%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <url>2019/10/27/redis%20%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>持久化</tag>
      
      <tag>数据恢复</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B Tree 和 B+Tree</title>
    <link href="undefined2019/10/27/B%20Tree%20%E5%92%8C%20B+Tree/"/>
    <url>2019/10/27/B%20Tree%20%E5%92%8C%20B+Tree/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>平衡树</tag>
      
      <tag>数据库原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis 发布订阅的使用及原理</title>
    <link href="undefined2019/10/27/redis%20%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <url>2019/10/27/redis%20%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>观察者模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis 集群的使用及原理</title>
    <link href="undefined2019/10/27/redis%20%E9%9B%86%E7%BE%A4%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <url>2019/10/27/redis%20%E9%9B%86%E7%BE%A4%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>集群</tag>
      
      <tag>分布式</tag>
      
      <tag>高可用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis 事务的使用及原理</title>
    <link href="undefined2019/10/27/redis%20%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <url>2019/10/27/redis%20%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据一致性</tag>
      
      <tag>ACID</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经网络基本概念</title>
    <link href="undefined2019/04/25/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>2019/04/25/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="最简单的感知模型"><a href="#最简单的感知模型" class="headerlink" title="最简单的感知模型"></a>最简单的感知模型</h3><p>一个输入x，权重w，偏置b，<br>y = wx + b</p><ul><li><p>以上是最基本的线性函数，但是大多数数据分类都是非线性的，所以需要进过一个激活函数</p></li><li><p>y = 激活函数(wx+b)</p></li><li><p>激活函数的定义：把不同神经元之间单纯的矩阵相乘，变成非线性的变化</p></li><li><p>正向传播：就是输入值经过一系列权重和激活函数的运算</p></li><li><p>反向传播：就是根据预测值和真实值之间的差值，对应的调整前面的权值的过程</p></li><li><p>反向传播是神经网络的精华：反向传播，算法有梯度下降的方式<br>求梯度就是求导数（斜率）<br>根据输出对w求偏导数，（链式法则）</p></li><li><p>激活函数：sigmotd函数，relu函数，tanh函数，softmax函数（归一化函数） </p></li><li><p>digmotd函数，弱点是：容易梯度消失</p></li><li><p>正则化项，防止过拟合问题 </p></li><li><p>dropout 防止过拟合问题，就是在更新权值的时候，忽略掉一些神经元</p></li></ul><h3 id="CNN-卷积神经网络"><a href="#CNN-卷积神经网络" class="headerlink" title="CNN 卷积神经网络"></a>CNN 卷积神经网络</h3><p>input -&gt; CONV -&gt; ReLU -&gt; POOL -&gt; FC</p><p>输入层<br>卷积层  filter提取特征<br>激活函数<br>池化层  特征压缩<br>全连接层</p><h3 id="RNN-递归神经网络"><a href="#RNN-递归神经网络" class="headerlink" title="RNN 递归神经网络"></a>RNN 递归神经网络</h3><p>强调前面的结果与后面的结果的关系</p><h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><blockquote><p>如果输出是线性的，那么均方误差比较合适<br>如果是S型的，交叉熵比较合适<br>softmax则使用对数释然函数</p></blockquote><h3 id="防止过拟合的方式"><a href="#防止过拟合的方式" class="headerlink" title="防止过拟合的方式"></a>防止过拟合的方式</h3><ol><li>增加数据量</li><li>增加正则化项</li><li>dropout</li></ol>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>raft算法解析</title>
    <link href="undefined2019/04/25/raft%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
    <url>2019/04/25/raft%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据一致性</tag>
      
      <tag>consensus</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>